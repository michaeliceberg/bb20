'use client'

import { Button } from "@/components/ui/button"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { motion } from "framer-motion";
import { useEffect, useState } from "react"
import { PopoverClose } from "@radix-ui/react-popover";


const TestPage = async () => {


// –ù–∞ —Å—Ç*–∞%–æ*—Ä–∏*–Ω–Ω%–Ω*—ã–µ —É–ª–∏—Ü—ã –∑–∞–º*–∏%–µ*—Ä–∞—é—â–µ–≥–æ NL–≥–æ—Ä–æ–¥–∞ –ª*–æ%–∞*–∂–∏–ª—Å—è –±–ª*–∏%–µ*—Å—Ç–∞—é—â–∏–π –ø*–æ%–∞*–∫—Ä–æ–≤ –Ω–æ—á–∏.
// –¢*–∞%–æ*–∏–Ω—Å—Ç–≤–µ*–Ω–Ω%–Ω*—ã–π –ª—É—á*/%—å* –ª—É*–Ω–Ω%–Ω*–æ–π –¥–æ—Ä–æ*–∂%—à*–∫–æ–π —Ä–æ*–±%–ø*–∫–æ NL–±–ª–µ—Å*‚ê£%—Ç*–Ω—É–ª –Ω–∞ —Ç—Ä*–∞%–æ*–≤—è–Ω–∏—Å—Ç–æ–º –∫–æ–≤—Ä–µ, –ø—Ä*–∏%–µ*—á—É–¥–ª*–∏%–µ*–≤–æ NL–æ–∑*–∞%–æ*—Ä–∏–ª —Ä*–∞%–æ*–≤–Ω–∏*–Ω–Ω%–Ω*—É—é –≥–ª–∞*–¥%—Ç*—å –Ω–∞ –æ–∫—Ä–∞–∏–Ω*–µ%–∏*.
// –ï–≥–æ  –Ω–µ*|%/*—É–≤–µ—Ä–µ–Ω–Ω—ã–π, –∞ –∑–∞—Å—Ç–µ–Ω—á*–∏%–µ*–≤—ã–π —Å–≤–µ—Ç –ø—Ä*–µ%–∏*–≤—Ä–∞—Ç–∏–ª NL—Ä*–∞%–æ**—Å—Å%—Å%–∑—Å*—Ç–∏–ª–∞—é—â–µ–µ—Å—è –ø—Ä–æ*–æ%–∞*—Å—Ç—Ä–∞–Ω*‚ê£%—Ç*—Å—Ç–≤–æ –≤  NL—Å–≤–µ—Ç–ª–æ*-%/%|*—Å–µ—Ä–µ–±—Ä*—è%–µ**–Ω%–Ω–Ω*–æ–µ –æ–±–ª*–∞%–æ*–∫–æ*,% * NL–ø—Ä–∞–∑*–¥%‚ê£*–Ω–∏—á*‚ê£%—å*–Ω–æ –æ—Å–≤*–µ%—è*—Ç–∏–ª –≤—Å—ë –≤–æ–∫—Ä—É–≥ NL–≥–∏–≥–∞–Ω*—Ç%‚ê£*—Å–∫–∏–º –ø—Ä–æ–∂–µ–∫—Ç–æ—Ä–æ–º,  –∫–∞–∫*|%/%-*–±—É–¥*/%|%-*—Ç–æ NL—Å–æ*–Ω–Ω%–Ω*–∞—è —Ç–∏—à*—å%‚ê£* –≤*—Å%–∑*–∫–∏–Ω—É–ª–∞ –ø—Ä*–∏%–µ*–∫—Ä—ã—Ç—ã–µ —Ä–µ—Å*‚ê£%—Ç*–Ω–∏—Ü*—ã%–∏*.
// –ö–∞–º—ã—à*–æ%—ë*–≤—ã–µ –∑–∞—Ä*–æ%–∞*—Å–ª–∏ –≤ –æ–∫—Ä–µ—Å*—Ç%‚ê£*–Ω–æ—Å—Ç—è—Ö NL –ø–µ—Ä*–µ%–∏*—à*—ë%–æ*–ø—Ç—ã–≤–∞—é—Ç*‚ê£%—ä%—å*—Å—è —à*–µ%–∏*–ª–µ—Å—Ç—è—â–µ–π –ª*–∏%–µ*—Å—Ç–≤–æ–π, NL–ø—Ä*–∏%–µ*–∫*–∞%–æ*—Å–∞—é—Ç*‚ê£%—ä%—å*—Å—è –∫ —á—É*–≤%‚ê£*—Å–≤—Ç–∏—Ç–µ–ª—å–Ω—ã–º NL—Ç—Ä*–∞%–æ*–≤–∏–Ω–∫–∞–º, —Ä*–æ%–∞*–Ω—è*—é%—è*—Ç —Å—Ç*–µ%–∏*–∫–ª—è*–Ω–Ω%–Ω*—ã–µ NL—Ä*–æ%–∞*—Å–∏–Ω–∫–∏ –Ω–∞ –∑–µ–ª—ë*–Ω%–Ω–Ω*—É—é –ø–æ—Ä*–æ%–∞*—Å–ª—å.
// –ü–æ–ª*/%-%|*–Ω–æ—á*‚ê£%—å%—ä*–Ω—ã–π —á–∞—Å —É—Ä*–∞%–æ*–≤–Ω–∞–≤–µ—à–µ–Ω–Ω–æ –¥—ã—à*–∏%–µ%—ã*—Ç –¥–∞–ª–µ–∫–æ  –Ω–µ*|%/*—Ö*–æ%–∞*–ª–æ–¥–Ω—ã–º –≤–æ–∑–¥—É—Ö–æ–º.
// –ù–æ—á—å - –≤—Ä–µ–º—è —Ä–∞*–∑%—Å*–¥—É–º–∏–π.
// –ú–∏—Ä —Å–≤–µ–∂*‚ê£%—ä%—å* –∏ –º–æ–≥—É—á*‚ê£%—ä%—å*.
// –û—Ç–∫—Ä—ã–≤–∞–µ—à*—å%—ä%‚ê£* –Ω–∞—Å—Ç–µ–∂*—å%—ä%‚ê£* –¥*–µ%–∏*—Ä*–µ%–∏*–≤—è*–Ω–Ω%–Ω*—É—é NL—Ä–∞–º—É, –≤*–∑—Å%c*–º–∞—Ç—Ä*–∏%–µ*–≤–∞*–µ%–∏*—à*—å%—ä%‚ê£*—Å—è –≤ –≤–æ–≤—Å–µ NL–Ω–µ*/%|*–±–µ*–∑%—Å*–≥—Ä–∞–Ω–∏—á*‚ê£%—ä%—å*–Ω—É—é –¥–∞–ª—å, NL—Å—Ç—Ä–∞—Å*—Ç%‚ê£*–Ω–æ –≥–ª*–æ%–∞*—Ç–∞–µ—à*—å%—ä%‚ê£* –∑–∞–ø*–∞%–æ*—Ö–∏ NL–±–ª*–∞%–æ*–≥–æ—É—Ö–∞—é—â–∏—Ö —Ç—Ä–∞–≤ –∏ –≤–æ–ø—Ä*–æ%–∞*—à–∞–µ—à*—å%—ä%‚ê£* NL—É  –∫–æ–≥–æ*-%/%|*–Ω–∏–±—É–¥—å: ¬´–ü–æ—á–µ–º—É*|%/%-*–∂–µ —Ç–∞–∫ NL—Å–∫*–æ%–∞*—Ä–æ—Ç–µ—á*‚ê£%—å%—ä*–Ω—ã –∏ —Ç–∞–∫ –ø—Ä*–µ%–∏*–∫—Ä–∞—Å*‚ê£%—Ç*–Ω—ã NL–≤*–µ%–∏*—Å–µ*–Ω–Ω%–Ω*–∏–µ —Å—É–º*–µ%–∏*—Ä–∫–∏?¬ª
// –ê –ø–æ—Ç–æ–º –µ—â*—ë%–æ* –Ω–µ –º–Ω–æ–≥–æ –ø–æ—Å–º–æ—Ç—Ä*–∏%–µ*—à*—å%—ä%‚ê£* NL–Ω–∞ –ø—Ä*–∏%–µ*–≥–Ω—É–≤—à–∏–µ—Å—è –¥*–µ%–∏*—Ä–µ–≤*—å%—ä%‚ê£*—è, –Ω–∞ –ø—Ä*–∏%–µ*–∫—Ä—ã—Ç—ã–µ  NL–∫–æ–ª–æ*–¥%—Ç%‚ê£*—Ü*—ã%–∏%–∞* —Å –∫–ª—é—á*–µ%–∏*–≤–æ–π –≤–æ–¥–æ–π, –Ω–∞  NL–Ω–µ*/%|*–≥–ª—É–±–æ–∫–∏–π –æ–≤—Ä–∞–∂*–µ%–∏*–∫ —Å –∑–µ–º–ª*—è%–µ**–Ω%–Ω–Ω*—ã–º NL–º–æ—Å—Ç–æ–º  - –Ω–∞ –≤—Å—ë, —á—Ç–æ –≤*–∏%–µ*–¥–Ω–µ*–µ%–∏*—Ç*—å%—ä%‚ê£*—Å—è NL–∏–∑ –æ–∫–æ—à–∫–∞.
// –í –º–µ–∂*—ä%—å%‚ê£*—è—Ä—É—Å–Ω—ã—Ö –ø–µ—Ä*–µ%–∏*–∫—Ä—ã—Ç–∏—è—Ö NL—á—Ç–æ*-%/%|*—Ç–æ —Ö—Ä—É—Å*—Ç%‚ê£*–Ω–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–¥–≤–µ—Ç—Ä–µ*–Ω–Ω%–Ω*–æ–π NL—Å—Ç*–æ%–∞*—Ä*–æ%–∞*–Ω—ã –∫ –¥–æ–º—É NL–ø–æ–¥–±*–∏%–µ*—Ä–∞*–µ%–∏*—Ç*‚ê£%—å%—ä*—Å—è –º–µ—Å*—Ç%‚ê£*–Ω–∞—è NL—Å–æ–±–∞—á*–æ%—ë*–Ω–∫–∞.
// –û–Ω–∞ –≤—ã—Ç*–∏%–µ*—Ä–∞–µ—Ç –ª–∞–ø–∫–∏ –æ NL–≥–ª–∏–Ω*—è%–µ**–Ω%–Ω–Ω*—É—é –ø–ª*–∞%–æ*—Å—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é  NL–∫–æ–µ*-%/%|*–∫—Ç–æ –∑–∞–±—ã–ª –Ω–∞ –∫—Ä—ã–ª—å—Ü*–µ%—ç*, –∏ NL–¥–æ–º –µ–π –∫–∞–∂–µ—Ç*‚ê£%—ä%—å*—Å—è –≥–∏–≥–∞–Ω*—Ç%‚ê£*—Å–∫*–∏%–µ*–º, NL–≥—Ä–æ–º–æ–∑*–¥%‚ê£%—Ç*–∫*–∏%–µ*–º *–∑%—Å*–¥–∞–Ω*–∏%–µ*–µ–º.
// –í–¥—Ä–≥, –≤—ã–ø*–∞%–æ*–¥*–µ%–∏*—Ç –∏–∑ –≥–Ω*–µ%–∏*–∑–¥–∞ NL–≥*–∞%–æ*–ª—á*–æ%—ë*–Ω–æ–∫ –∏ –ø–æ–ø*–∞%–æ*–¥—ë—Ç –ø—Ä—è–º–æ –Ω–∞ NL—Ö–æ–ª—â*–æ%—ë*–≤—ã–π –º–µ—à–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä*–∞%–æ**—Å—Å%–∑—Å%—Å*—Ç*–µ%–∏*–ª–∏–ª–∏ NL–≤–µ—á–µ—Ä–æ–º —Ö–æ–∑—è–µ–≤–∞, –Ω–æ —Å–æ–±–∞—á*—å%—ä%‚ê£*–∫–∞ –Ω–∏–∫–æ–≥–¥–∞ NL–Ω–µ*|%/*—Ç—Ä–æ–Ω*–µ%–∏*—Ç –ø—Ç–µ–Ω—Ü*–æ%—ë*–≤, NL–∞ –ª–∏—à*—å%‚ê£* –ø—Ä*–∏%–µ*–≥–ª*—è%–∏*–¥–∏—Ç*‚ê£%—ä%—å*—Å—è —Å NL—Å–µ—Ä*—å%—ä%‚ê£*—ë–∑–Ω–æ—Å—Ç*—å%—ä*—é –∫ –º–∞–ª—ã—à—É –∏ NL—Å—Ç–µ—Ä*–µ%–∏*–∂*—ë%–æ*—Ç –µ–≥–æ –¥–æ NL—É—Ç—Ä*–µ%–∏**–Ω–Ω%–Ω**–µ%–∏*–π –∑*–∞%–æ*—Ä–∏.
// –†—É–º—è*–Ω%–Ω–Ω*–æ–µ –º–∞—Ä–µ–≤–æ —Ä*–∞%–æ**—Å—Å%—Å%–∑—Å*–≤–µ—Ç–∞ –æ—Å–≤*–µ%—è*—â–∞*–µ%–∏*—Ç —á—É–≥—É*–Ω–Ω%–Ω*—É—é –∏–∑–≥*–æ%–∞*—Ä–æ*–¥%—Ç*—å.
// –õ–∏–∫–∏ —Ç—É–º–∞*–Ω–Ω%–Ω*—ã—Ö –∫—Ä—ã—à*‚ê£%—å%—ä* —Å–æ—á*–µ%–∏*—Ç–∞—é—Ç—Å—è NL–≤–º–µ—Å—Ç–µ, —Å–ª*–∏%–µ*–≤–∞—é—Ç*‚ê£%—å%—ä*—Å—è –≤ —Å–≤–∏–Ω—Ü*–æ%—ë*–≤—ã–π NL–≥*–æ%–∞*—Ä*–∏%–µ*–∑–æ–Ω—Ç –∏ —É—á–∞*‚ê£%–≤*—Å—Ç–≤—É*—é%—è*—Ç –≤ NL—Å–ø–µ–∫—Ç–∞–∫–ª*–µ%–∏* –æ –Ω–∞—á–∞–ª*–µ%–∏* –Ω–æ–≤–æ–≥–æ –¥–Ω—è.
//  



	const text = ""


	const textNL = text.split('NL')
	const textListNL = textNL.map(el => el.split("*"))


	console.log(textListNL)


	type btnListType = 
	{
		rightAnswer: string,
		allVariantsThisBtn: string[],
		selectedVariant: string,
		rowInd: number,
		colInd: number,
	}[]

	let textBtnsInitial: btnListType = []


	let index_element = 0
	const textWithBtnNumbersNL = textListNL.map((this_line_textList, index_line) => {

		const textWithBtnNumbers = this_line_textList.map((el, index) => {
			index_element += 1

			if (el.includes("%"))
				{
					textBtnsInitial.push
						(
							{
								rightAnswer: el.split("%")[0],
								//
								// –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
								allVariantsThisBtn: el.split("%").sort(() => 0.5 - Math.random()),
																
								selectedVariant: "üåº", 

								rowInd: index_line,
								colInd: index,

								//"üçü",
							}
						)
					return('BTN')
					
				} 
			else 
				{
					return (el)

				}
			
			
	
	
		})

		return( 
			{
				textWithBtnNumbers: textWithBtnNumbers,
				index_line: index_line,
			}
		)

	})



	console.log('textBtnsInitialtextBtnsInitialtextBtnsInitial', textBtnsInitial)





const [textBtnsState, setTextBtnsState] = useState(textBtnsInitial)





	const [doneRight, setDoneRight] = useState(false)
	
	
	const handleClickVariant = (rowInd: number, colInd: number, variant: string) => {
		setTextBtnsState(prev =>
		  prev.map(btn =>
			(btn.rowInd === rowInd && btn.colInd === colInd) ? { ...btn, selectedVariant: variant } : btn
		  )
		);
	  };
	  


	useEffect(() => {
		const allCorrect = textBtnsState.every(btn => btn.rightAnswer === btn.selectedVariant);
		setDoneRight(allCorrect);
		console.log('doneRight:', allCorrect);
	}, [textBtnsState]);



	return (
		<div className="text-2xl">

			{
			
			textWithBtnNumbersNL.map((textWithBtnNumbers, index_line) => 
				
				{
					return (
					
					
					
					
					<div key={index_line + 8000}className="flex">
					
					{
					
					textWithBtnNumbers.textWithBtnNumbers.map((el, index_btn) => {
						if (el == 'BTN') 
						{return (					
							
							<Popover key={303030 + index_btn}>
								<PopoverTrigger asChild>
		
		
									<motion.div 
										whileHover={{ scale: 1.2 }}
										whileTap={{ scale: 0.8 }}
										className="font-bold text-sky-500 border-dashed border-sky-500 border-b-2  cursor-pointer"
		
									>									
											{textBtnsState.filter(btn => (btn.rowInd == index_line && btn.colInd == index_btn))[0]?.selectedVariant}
		
									</motion.div>
		
		
		
								</PopoverTrigger>
		
								<PopoverContent className="w-80">
		
								<PopoverClose asChild>
				
									<div className="flex justify-center gap-x-4">
		
									
											{textBtnsState.filter(btn => (btn.rowInd == index_line && btn.colInd == index_btn))[0]?.allVariantsThisBtn.map((variant, index_variant) => {
												console.log('variant:', variant, typeof variant);
												return(
													<div key={10000 + index_variant}>
														<Button onClick={()=>{handleClickVariant(index_line, index_btn, variant)}} key={202020 + index_variant}>
															{variant}
														</Button>

														{variant == "|"
															?
															<p className="text-xs -m-3 mt-1">—Ä–∞–∑–¥–µ–ª—å–Ω–æ</p>
															:
															variant == "/"
															?
															<p className="text-xs mt-1">—Å–ª–∏—Ç–Ω–æ</p>
															:
															variant == "-"
															?
															<p className="text-xs m-1 mt-1">–¥–µ—Ñ–∏—Å</p>
															:
															variant == "‚ê£"
															?
															<p className="text-xs m-2 mt-1">–ø—É—Å—Ç–æ</p>
															:
															<p></p>
														}
													</div>
											)}
											
											
											
											)}
											
		
									</div>
									</PopoverClose>
								</PopoverContent>
							</Popover>
		
		
						)} else {
							console.log(el)
							return(
								<p key={18000 + index_btn}style={{ whiteSpace: 'pre' }}>
									{el}
								</p>
							)
						}
					})}


				</div>





				)}







				
			)











			
			
			}



		</div>

		
	)
}

    
export default TestPage






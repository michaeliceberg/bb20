import React, { useEffect, useState } from 'react'
import { QuestionType } from './page'
import Latex from 'react-latex-next';
import 'katex/dist/katex.min.css';
import { Button } from "@/components/ui/button"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { motion } from "framer-motion";
import { PopoverClose } from "@radix-ui/react-popover";


type Props = {
    question: QuestionType
    onAnswer: (answer: string) => void
}

export const TypeRussianDictant = ({
    question,
    onAnswer,
}:Props) => {




  const text = question.question


	const textNL = text.split('NL')
	const textListNL = textNL.map(el => el.split("*"))


	console.log(textListNL)


	type btnListType = 
	{
		rightAnswer: string,
		allVariantsThisBtn: string[],
		selectedVariant: string,
		rowInd: number,
		colInd: number,
	}[]

	let textBtnsInitial: btnListType = []


	let index_element = 0
	const textWithBtnNumbersNL = textListNL.map((this_line_textList, index_line) => {

		const textWithBtnNumbers = this_line_textList.map((el, index) => {
			index_element += 1

			if (el.includes("%"))
				{
					textBtnsInitial.push
						(
							{
								rightAnswer: el.split("%")[0],
								//
								// –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
								allVariantsThisBtn: el.split("%").sort(() => 0.5 - Math.random()),
																
								selectedVariant: "üåº", 

								rowInd: index_line,
								colInd: index,

								//"üçü",
							}
						)
					return('BTN')
					
				} 
			else 
				{
					return (el)

				}
			
			
	
	
		})

		return( 
			{
				textWithBtnNumbers: textWithBtnNumbers,
				index_line: index_line,
			}
		)

	})



  const [textBtnsState, setTextBtnsState] = useState(textBtnsInitial)
	const [doneRight, setDoneRight] = useState(false)
	
	const handleClickVariant = (rowInd: number, colInd: number, variant: string) => {
		setTextBtnsState(prev =>
		  prev.map(btn =>
			(btn.rowInd === rowInd && btn.colInd === colInd) ? { ...btn, selectedVariant: variant } : btn
		  )
		);
  };
	  


	useEffect(() => {
		const allCorrect = textBtnsState.every(btn => btn.rightAnswer === btn.selectedVariant);
		setDoneRight(allCorrect);
		console.log('doneRight:', allCorrect);
	}, [textBtnsState]);



  return (
    
    <div className="grid grid-cols-2 gap-x-2 gap-y-2 mt-10">
          
    
    
          <div className="text-2xl">

{

textWithBtnNumbersNL.map((textWithBtnNumbers, index_line) => 
  
  {
    return (
    
    
    
    
    <div key={index_line + 8000}className="flex">
    
    {
    
    textWithBtnNumbers.textWithBtnNumbers.map((el, index_btn) => {
      if (el == 'BTN') 
      {return (					
        
        <Popover key={303030 + index_btn}>
          <PopoverTrigger asChild>


            <motion.div 
              whileHover={{ scale: 1.2 }}
              whileTap={{ scale: 0.8 }}
              className="font-bold text-sky-500 border-dashed border-sky-500 border-b-2  cursor-pointer"

            >									
                {textBtnsState.filter(btn => (btn.rowInd == index_line && btn.colInd == index_btn))[0]?.selectedVariant}

            </motion.div>



          </PopoverTrigger>

          <PopoverContent className="w-80">

          <PopoverClose asChild>
  
            <div className="flex justify-center gap-x-4">

            
                {textBtnsState.filter(btn => (btn.rowInd == index_line && btn.colInd == index_btn))[0]?.allVariantsThisBtn.map((variant, index_variant) => {
                  console.log('variant:', variant, typeof variant);
                  return(
                    <div key={10000 + index_variant}>
                      <Button onClick={()=>{handleClickVariant(index_line, index_btn, variant)}} key={202020 + index_variant}>
                        {variant}
                      </Button>

                      {variant == "|"
                        ?
                        <p className="text-xs -m-3 mt-1">—Ä–∞–∑–¥–µ–ª—å–Ω–æ</p>
                        :
                        variant == "/"
                        ?
                        <p className="text-xs mt-1">—Å–ª–∏—Ç–Ω–æ</p>
                        :
                        variant == "-"
                        ?
                        <p className="text-xs m-1 mt-1">–¥–µ—Ñ–∏—Å</p>
                        :
                        variant == "‚ê£"
                        ?
                        <p className="text-xs m-2 mt-1">–ø—É—Å—Ç–æ</p>
                        :
                        <p></p>
                      }
                    </div>
                )}
                
                
                
                )}
                

            </div>
            </PopoverClose>
          </PopoverContent>
        </Popover>


      )} else {
        console.log(el)
        return(
          <p key={18000 + index_btn}style={{ whiteSpace: 'pre' }}>
            {el}
          </p>
        )
      }
    })}


  </div>





  )}







  
)













}



</div>


  
  </div>
  )
}




// –°–∫–≤–æ[–∑/—Å]—å –±–µ(–∑—Å,(—Å)–º–µ(–Ω,–Ω–Ω)—É—é –º–≥–ª—É. –ï–≥–æ—Ä—É—à–∫–∞ –≤–∏–¥–µ–ª –ø–æ—á—Ç–∏ –≤—Å–µ—É
// –æ–Ω —Å —Ç—Ä—É–¥–æ–º –º–æ–≥ —Ä –î–∞–≥–ª—è –¥–µ—Ç—å –≤–¥–ê–ª–µ–∫–µ (—Ç—É—Å–∫–ª–æ)—Å–∏—Ä–µ–Ω–µ–≤—ã–π —Ü–≤–µ—Ç –∏
// —Ç.–ê–∏–Ω—Å—Ç–≤–µ(–Ω,–Ω–Ω)—ã–µ –û—á–ï—Ä—Ç–∞–Ω–∏—è —Å–∫–ª–æ–Ω–∏–≤—à–∏—Ö—Å—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –í
// (–ø–æ–ª—É)–Ω–æ—á –Ω–æ–π —Ç.–ï–º–Ω–æ—Ç–µ –≤—Å—ë –ø—Ä–ï–¥—Å—Ç–ê–≤–ª—è –ï—Ç—Å—è –Ω–µ —Ç–µ–º,—á–µ–º –æ–Ω–æ
// —è–≤–ª—è–ï—Ç—Å—è –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ. –°—É–º–ï —Ä–∫–∏ ‚Äî –≤—Ä–µ–º—è –ø—Ä 0 –±—É–∂–¥–µ–Ω–∏—è
// –≤ –û–û–±—Ä –ê –∂–µ–Ω–∏—è. –ò–Ω–æ–≥–¥–∞
// –ø–æ—á—É–¥—è —Ç —Å—è (–Ω–µ)–ø—Ä–æ–ª–∞–∑–Ω—ã–µ –∑–∞—Ä–µ —Å–ª–∏
// –±—É—Ä—å —è–Ω–∞, –∏–Ω–æ–≥–¥–∞ –ø–æ–¥—Å—Ç–µ—Ä–ï –∂–ï—Ç –æ–±—Ä–∞–∑ —Å—Ç –¥—Ä–æ–∂–ï –≤–æ–≥–æ –ø—Å–∞, –∞ –ø–æ—Ä–æ–π
// –Ω–∞—á–∏–Ω–∞–µ—Ç –∫–ê–∑–∞—Ç—å—Å—è –∫–∞–∫(–±—É–¥–∏—Ç–æ) –ø—Ä–∏–¥—Ç/–∏–ª–∞—Å—å (–≤)—Å—Ç–æ —Ä–æ–Ω–∫–µ
// —Ñ–∏–≥—É—Ä–∞ –º–æ–Ω–∞—Ö–∞ –≤ —á–Å—Ä–Ω–æ–º –∫–æ–ª–ø–∞–∫–µ –∏ —à–µ—Ä—Å—Ç –î.(–Ω,–Ω–Ω)–æ–π —Ä–∏–∑–µ.
// –≤–∏–¥–µ–Ω–∏–µ –ø—Ä/–±–ª –ò–∂–∞–µ—Ç _—Å—è, —Ä–ê —Å—Ç—ë—Ç.
// –í–æ—Ç –æ–Ω–æ –ø–æ—Ä–æ –≤–Ω—è–ª–æ—Å—å —Å
// –±—Ä–∏—á–∫–æ–π, –∏ –≤—ã —Å —É–∂–∞–µ—Ç–µ –≥–ª–∞–∑–∞ –∏ —è –í —Å—Ç–≤–µ–Ω–Ω–æ –≤–∏–¥–∏ —Ç–µ, —á—Ç–æ —ç—Ç–æ –≤—Å–µ–≥–æ
// –ª–∏—à—å —Ä 4(–∑,—Å)–∫–∏–¥–∏—Å—Ç—ã–π –∫—É—Å—Ç –∏–ª–∏ –≥–ò–≥–∞–Ω–¢ —Å–∫–∏–π –∫–∞–º–µ–Ω—å. –¢–∞–∫–∏–µ
// (–Ω–µ)–ø–æ–¥–≤–∏–∂–Ω—ã–µ ¬´—Ñ–∏–≥—É—Ä—ã¬ª –≤–æ–≤—Å–µ (–Ω–µ —Ä–µ–¥–∫–æ –º–µ—Ä–µ—â 4—Ç —Å—è –Ω–∞
// /
// –ø–æ–≤–æ—Ä–æ—Ç–∞. –¢—ã (–Ω–µ)–∏–∑–º–µ–Ω–Ω–æ –æ–ø–ê—Å–∞–ï—à—å —Å—è —ç—Ç–∏—Ö
// –≤–∏–¥–µ–Ω–∏–π
// –≤—ã—Ä–ê–∑–∏—Ç–µ–ª—å–Ω–æ 8(3,/–∫—Ä–∏–∫ –ò–≤–∞ –ï 6 : –£–π–¥–∏, —á—É–¥–∏—â–µ, (—Å–≥–ª–∞–∑ –¥–æ–ª–æ–π!
// –ö–æ–≥–¥–∞ –∑–∞–≥—Ä–∏—Ç—Å—è –Ω–∞ –Ω–µ–±–µ –ø—Ä–∏—á—É–¥–ª–∏–≤—ã–π —Å–µ—Ä–ø—ñ –ª—É–Ω—ã, –Ω–æ—á—å
// –°–¢ –ê –ù–û–≤–∏—Ç_
// _—Å—è –±–ª–µ–¥–Ω–æ–π –∏ —Ç–æ–º–Ω–æ–π. –† –î (–∑—Å,—Å—Å–µ—è–Ω–Ω—ã–π —Å–≤–µ—Ç –≥–æ—Ä—è—á–æ
// –±–ª–µ—Å –Ω—ë—Ç –Ω–∞ –∫–∞–∂–¥–æ–π —Ç—Ä–ê–≤–∏–Ω–∫ –ï,
// –ø—Ä–∏–∫ –æ—Å–Ω—ë—Ç—Å—è
// —Ä. –ê(—Å,—Å—Å|—Ç–∏–ª–∞–µ–º–æ–π –¥–∞–ª–∏ ,–æ–∑ –ê—Ä–∏—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (–æ—Ç)–∫—Ä–∞—è(–¥–æ)–∫—Ä–∞—è –∏
// –ø—Ä–ï –æ–±—Ä–∞–∑–∏—Ç –ø—Ä–∏—Ç–∏—Ö—à—É—é —Ä–ê–≤–Ω–∏–Ω—É –≤ —Å—Ç–µ–∫–ª—è(–Ω, –Ω–Ω)—É—é –≥–ª–∞–¥—å. –î—É—à–∞
// –æ—Ç (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ —Å—ä—ë–∂–∏—Ç—Å—è,–∞ –ø–æ—Ç–æ–º —Ä–ê (–∑,—Å)–ø –ê—Ö–Ω—ë—Ç —Å—è –∏
// —É–¥–ò–≤–∏—Ç—Å—è —Ç–∞–∫–æ–º—É –≤–æ–ª—à–µ–ë—Å—Ç–≤—É. –í–æ–∑–¥—É—Ö —Ç–∞–∫ –≥–æ—Ä—è—á ,–Ω–æ –∏ —Ç–∞–∫
// —Å–≤–µ–∂. –ë–ï(–∑,—Å)–∫–æ–Ω–µ—á –Ω–∞—è —à–∏—Ä—å —Å—Ç–µ–ø–∏ –æ—Ç—Ä–∞–∂–∞–ï —Ç –¥–ª–∏(–Ω,–Ω–Ω)—ã–µ
// –≤–µ—Ä–µ–Ω–∏—Ü—ã –æ–±–ª–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–≤–∏–∂—É—Ç—Å—è –∑–∞ (–Ω–µ—É–±–ª–∏–∑–∫–∏–π, –∞
// —Ç—É–º–∞(–Ω,–Ω–Ω)—ã–π –ì–û–†–ò–∑–æ–Ω—Ç, –≥—Ä–æ–º –µ–∑–¥—è—Ç—Å—è –∏ —Å–æ—á–µ—Ç–∞—é—Ç
// —á—É–¥–µ—Å–Ω—ã–µ –æ–±—Ä–∞–∑—ã. –í–∑–≥–ª—è–Ω–µ—à—å –Ω–∞ –∑–≤—ë–∑–¥–æ—á –∫–∏ –ø–æ–≤–µ—Ä—Ö —Ç—É—á
// (,—Å)–¥–µ–ª–∞–µ—à—å –≤–¥–æ—Ö –∏ –ø–æ—á—É–í—Å—Ç–≤—É–µ—à—å –ø—Ä–∞–∑–î–Ω–∏—á–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π
// –∑–∞–º–∏—Ä–∞—é—â–µ–π –ø—Ä–∏—Ä–æ–¥—ã. –¢—ã –ø–æ–Ω–∏–º–∞–ï—à—å –∫–∞–∫ –≤–∞–∂–Ω–æ –∫–∞–∂–¥–æ–µ
// –º–≥–Ω–æ–≤–µ–Ω–∏–µ –∂–∏–∑–Ω–∏. –û (–Ω–µ–æ–±—ä—è—Ç–Ω–æ–π –≥–ª—É–±–∏–Ω–µ –∏ –±–µ(3,—Å)–≥—Ä–¥ –Ω–∏—á –Ω–æ—Å—Ç–∏
// –Ω–µ–±–∞ –º–æ–∂–Ω–æ —Å—É–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ—á –¥—é –≤ —Å—Ç–µ–ø–∏, –∫–æ–≥–¥–∞ –ª—É–Ω–∞ –æ–∑–ê—Ä—è–µ—Ç –≤—Å—ë
// –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ. –¢—Ä.–ï—Å–∫–æ—Ç–Ω—è –Ω–∞—Å–µ–∫–æ–º—ã—Ö , –£–î–ò –≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–≥—É—Ä—ã,
// –ª—É(–Ω,–Ω–Ω)—ã–π —Å–≤–µ—Ç —É—á–∞—Å—Ç–≤—É—é—Ç –≤ —ç—Ç–æ–º –ø—Ä–ï –ª–µ—Å–¢ –Ω–æ–º —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ –∏
// –ø—Ä–æ–±—É–∂–¥–∞—é—Ç —Å—Ç—Ä–∞—Å–¢–Ω—É—é –∂–∞–∂–¥—É –∂–∏–∑–Ω–∏.
// (3 –æ—à.)